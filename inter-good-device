#!/bin/sh

igdEchoArg(){
	echo $intport $extport $proto $duration
}

firstArg="$1"
igdParseDashed(){
	# near to upnpc's argument order
	# but we move the first arg 'ip' (or iface in this script) to the end
	# since it can usually be calculated
	IFS=- read intport extport proto duration ip sleep<<EOF
${1:-$firstArg}
EOF
}

igdParseSpaced(){
	# space separated args
	IFS=' ' read intport extport proto duration ip sleep<<EOF
${*:-$firstArg}
EOF
}

defaultIp(){
	# ip address of the default route is usually what we want
	# https://unix.stackexchange.com/a/302613 but for ip address not device
	ip -4 route ls | grep default | grep -Po '(?<=src )(\S+)'
}

ipAddr(){
	# by default print the gateway interface's ip address
	if [ -z "${1:-$ip}" ]
	then
		defaultIp
		return
	fi

	# if we have an ip address, return it
	# https://stackoverflow.com/a/13778973
	if expr "${1:-$ip}" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null;
	then
		echo "${1:-$ip}"
		return
	fi

	# not an ip, so treat as iface. print the ip address for the iface.
	# https://unix.stackexchange.com/a/87470
	ip -f inet addr show "${1:-$ip}" | grep -Po 'inet \K[\d.]+'
}

igdParse(){
	if [ "$IGD_PARSE" = "dashed" ]
	then
		igdParseDashed $*
	elif [ "$IGD_PARSE" = "none" ]
	then
		true
	else
		igdParseSpaced $*
	fi
}
igdSleepMaybe(){
	local rc="$?"

	# set a sleep parameter when running as a restarting service, to make the script stay open a certain amount of time
	# then re-run
	local s="${sleep:-$IGD_SLEEP}"
	if [ -n "$s" ]
	then
		sleep $s
	fi
	exit "$rc"
}

# via https://unix.stackexchange.com/a/639951
fail_if_stderr() (
  # save current options
  bash_options="${-}"

  # disable exit on error
  set +o errexit

  # Save return code of command in rc
  rc=$({
    ("$@" 2>&1 >&3 3>&- 4>&-; echo "$?" >&4) |
    grep '^' >&2 3>&- 4>&-
  } 4>&1)

  # Save return code of grep in err_in_stderr
  err_in_stderr=$?

  # enable exit on error if it was previously enabled
  test "${bash_options#*e*}" != "$bash_options" && set -o errexit

  # exit with original return code if it's not zero
  [ "$rc" -eq 0 ] || exit "$rc"

  # exit with return code 125 if something was in stderr
  [ "$err_in_stderr" -ne 0 ] || exit 125
) 3>&1

igdRedirect(){
	${DRY:+echo} upnpc -r $intport ${extport:-$intport} ${proto:-tcp} $*
}

# i've found -r is easier to use but -a is precise so available here
igdAdd(){
	${DRY:+echo} upnpc -a $(ipAddr) $intport $extport ${proto:-tcp} ${duration:-86400} $*
}

# "service" is the same as a regular redirect but defaults to dashed syntax
igdService(){
	IGD_PARSE="${IGD_PARSE:-dashed}" igdParse $*
	fail_if_stderr igdRedirect
	igdSleepMaybe
}

igd(){
	igdParse $*
	fail_if_stderr igdRedirect
	igdSleepMaybe
}

[ -n "$SOURCE_ONLY" ] || igd $*
